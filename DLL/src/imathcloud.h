#ifndef imathcloud_h
#define imathcloud_h
#include <string>
#include <vector>

#ifdef __cplusplus
extern "C" {
#endif
 
#define imathcloud_dll __declspec(dllexport)


/***************************************************
 * Methods related to job status
****************************************************/ 

// Return the raw json string of the job id status
const char * imathcloud_dll imath_getJSONJobStatus(long x);

// Return an array of double, indicating the percentage of completion of the given job		
const char * imathcloud_dll imath_getJobPercentages(long x);

// Returns the numerical status code of the job (0,1,2,3,-1 for ready, waiting, queued, in progress, fail)
int imathcloud_dll imath_getJobStatus(long x);

/***************************************************
 * executing plugins (predefined jobs) to iMathCloud
****************************************************/ 

// Executes the specific plugin job for Butler Scientifics functionality.
// Returns the JSON string defining the status of the job and its ids.
// Accepts a list of filesIds (comma separated ids) to be used in the plugin, as returned 
// in the method imath_getFilesIdFromJSON.
const char * imathcloud_dll imath_executePlugin(const char *filesIds);

// Given the output of imath_executePlugin it returns the numerical status of the resources
long imathcloud_dll imath_getJobStatusFromJSON(const char *jsonStr);

// Given the output of the previous call, it returns the Id of the Job
long imathcloud_dll imath_getJobIdFromJSON(const char *jsonStr);

/***************************************************
* Methods to download data 
****************************************************/
// Download all output files generated by the jobId 
// It returns -1 (error) if the jobId is not finalized with the OK status
// or if the job has not generated any output file
// It returns 0 otherwise. It generates a zip file with name {jobId}.zip, with the data.

long imathcloud_dll imath_downloadFilesByJobId(long jobId);

/***************************************************
 * Methods related to uploading files to iMathCloud
****************************************************/ 

// Return the raw JSON received after uploading the files
// We assume file names are separated by commas (,)
const char * imathcloud_dll imath_uploadFilesJSONState(const char *filesStr);

// Given the output of imath_uploadFilesJSONState it returns the numerical status of the resources
const char * imathcloud_dll imath_getFilesStatusFromJSON(const char *jsonStr);

// Given the output of the previous call, it returns the Ids of the uploaded files
const char * imathcloud_dll imath_getFilesIdFromJSON(const char *jsonStr);



/***************************************************
 * Extra methods
****************************************************/ 

// Free the dynamically reserved memory block pointed by 'p'. 
// It should be called after the call of any function in this library that returns char *. 
// The reason is that strings are allocated dynamically in the HEAP to be persisted after the finalization of the method,
// and thus, such memory must be explicitly free. 

void imathcloud_dll imath_free(char *p);
#ifdef __cplusplus
}
#endif
 
#endif